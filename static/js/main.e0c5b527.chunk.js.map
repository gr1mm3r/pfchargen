{"version":3,"sources":["Speed.jsx","index.jsx"],"names":["Speed","base","run","this","prototype","toString","parse","speed","Number","split","modifyBase","speedArg","multiplier","Math","ceil","reduceBase","halfBase","reduceRun","min","s1","s2","STATS","STAT_TYPES","CLASSES","CLASS_TYPES","WEAPONS","SPELLCASTERS","ARMOR_TYPES","App","props","prevChangeWasToKey","state","default","stat","size","STR","DEX","CON","INT","WIS","CHA","load","light","Infinity","medium","fn","getValue","heavy","lift","armor","swim","getCurrentSpeed","climb","prevHistoryPushWasWithKey","isLoading","handleChange","bind","getState","getClassTypeTotal","getAbilityTotal","getAbilityMod","getArmorLimitedDex","getCurrentLoad","getCurrentLoadName","getArmedLoad","getArmedLoadName","getLoadLevels","getArmedSpeed","getOverlandSpeed","getArmedSkillCheckPenalty","getCurrentSkillCheckPenalty","getDefault","window","app","prevProps","prevState","title","document","result","recurse","cur","prop","undefined","console","debug","warn","Object","Array","isArray","p","qp","k","encodeURIComponent","history","replaceState","slice","replace","pushState","queryParams","qs","join","tokens","params","re","exec","key","decodeURIComponent","value","indexOf","toLowerCase","test","getQueryParams","location","search","s","JSON","info","setState","restoreReady","ps","pp","setStateByKey","componentDidUpdate","autoresizeAll","event","log","forceUpdate","onpopstate","popstateRestore","propKey","newVal","parseFloat","newState","newLeaf","reduce","childState","length","setProps","withPropKeyValue","meta","prevChangeTime","Date","toLocaleString","rev","mutator","e","oldVal","evval","target","type","checked","defaultTo","stateVal","Error","tree","defaultVal","sum","classN","ability","skipTemp","NaN","rageBonus","getRageState","filter","x","round","getLoadName","map","concat","keys","eq","findIndex","loadLimit","maxLoad","floor","baseMaxLoad","str","sizeMultiplier","sizeMod","legs","max","AddfieldsNavbar","fluid","InfoRow","md","xs","sm","AbilityTable","SizeField","className","NoteArea","noteKey","val","ClassTable","InitTable","ResistanceTable","HPTable","ACTable","SaveTable","AttackTable","ArmorTable","SkillTable","WeaponTable","RagePanel","EquipmentTable","SpeedTable","placeholder","onerow","LoadTable","SpellcasterPanels","Component","ColText","bsClass","validationState","label","Static","children","ColTextField","controlId","onChange","sizeValues","sizeOptions","sizeName","index","statePropKey","bsSize","componentClass","compose","onlyUpdateForKeys","pure","bsStyle","href","StatRow","raging","abilityFields","TextField","condensed","id","role","inputRef","addAutoresize","NoPrintAbbr","ClassRow","rowName","name","classFields","classRows","i","isEmpty","totalHP","initTotal","colSpan","flatFootDexPenalty","SaveTableRow","save","toUpperCase","strMod","dexMod","cmbAbilityMod","attackRows","attack","armorKeys","armorControls","shieldControls","SelectField","options","weaponKeys","weaponRows","cells","row","CheckboxField","inline","currVal","emptyOption","optionList","option","SKILL_AC_PENALTY_ABILITIES","CustomSkillRow","abilityKey","hasAcPenalty","nameField","abilityField","empty","SkillRowBase","SkillRow","hasCategory","dispName","categoryField","isUntrainedUse","ranks","isClass","SKILL_ABILITIES","SKILLS_UNTRAINED_USE","CATEGORY_SKILLS","skillRows","rows","categoryIndex","prevKey","customSkillRows","totalSkillRanks","assignedSkillRanks","skill","unassignedLabel","striped","rageLevel","header","will","ac","equipmentRows","EquipmentRow","rageRounds","rageState","headerCheckbox","validationRageEnabled","note","rage","panels","SpellTablePanel","SpellTablePanelHeader","RANGES","SpellTablePanelRow","level","dcPlaceholder","prep","used","propsDC","prepCell","usedCell","spellTableRows","abilityMod","lev","levelKey","hideLast","abilityBonus","String","rowPropKey","remainingSpells","remainingProps","usedProps","clearTemp","clearUses","Header","Brand","Toggle","Collapse","Text","onSelect","find","pullRight","invert","loadLevels","currentLoad","fullLoadClass","loadLevel","levels","armedLoadName","loadClass","loadName","armorClass","armorLevel","v","object","autoresizeFields","push","addEventListener","autoresize_update","forEach","style","height","scrollHeight","arg","call","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.e0c5b527.chunk.js","sourcesContent":["export function Speed(base, run) {\n    this.base = base;\n    this.run = run;\n}\nSpeed.prototype.toString = function() { return this.base + \" (x\" + this.run + \")\";};\nSpeed.parse = function(speed) {\n    if( speed instanceof Speed ) return speed;\n    return new Speed(Number((speed+' ').split(/[ (x)/]+/)[0]),\n        Number((speed+' ').split(/[ (x)/]+/)[1] || 4));\n}\nSpeed.modifyBase = function(speedArg, multiplier) {\n    const speed = Speed.parse(speedArg);\n    return new Speed( Math.ceil(speed.base/5*multiplier)*5, speed.run);\n}\nSpeed.reduceBase = function(speedArg) { return Speed.modifyBase(speedArg, 2/3); }\nSpeed.halfBase = function(speedArg) { return Speed.modifyBase(speedArg, 1/2); }\nSpeed.reduceRun = function(speedArg) {\n    const speed = Speed.parse(speedArg);\n    return new Speed( speed.base, speed.run-1 );\n}\nSpeed.min = function(s1, s2) {\n    return Speed.parse(s1).base <= Speed.parse(s2).base ? s1 : s2;\n}\n","import React, { Component } from 'react';\nimport ReactDOM from 'react-dom';\n// eslint-disable-next-line\nimport { Glyphicon, Grid, Row, Col, Table, Form, Checkbox, FormGroup, FormControl, ControlLabel, ButtonToolbar, Button, ButtonGroup, DropdownButton, MenuItem, Navbar, Nav, NavDropdown, Panel } from 'react-bootstrap';\nimport { pure, compose, onlyUpdateForKeys  } from 'recompose';\nimport { Speed } from './Speed.jsx';\nimport './index.css'\n\nconst STATS = ['STR','DEX','CON', 'INT','WIS','CHA'];\nconst STAT_TYPES = ['base','enhance','misc','temp'];\nconst CLASSES = ['class1','class2','class3','class4','class5',\n    'class6','class7','class8','class9','class10'];\nconst CLASS_TYPES = [ 'class', 'hd', 'hp', 'skill', 'bab', 'fort', 'refl', 'will', 'levels' ];\nconst WEAPONS = ['weapon0', 'weapon1','weapon2','weapon3','weapon4','weapon5',\n    'weapon6','weapon7','weapon8','weapon9','weapon10',\n    'weapon11','weapon12','weapon13','weapon14','weapon15',\n    'weapon16','weapon17','weapon18','weapon19','weapon20'];\nconst SAVES = ['fort','refl','will'];\nconst SPELLCASTERS = ['sp0','sp1','sp2','sp3','sp4'];\nconst ARMOR_TYPES = ['Light','Medium','Heavy'];\n\nclass App extends Component {\n    constructor(props) {\n        super(props);\n        this.prevChangeWasToKey = '';\n        this.state = {};\n        this.default = {\n            stat: {\n                size: 0,\n                STR: { base: 10 },\n                DEX: { base: 10 },\n                CON: { base: 10 },\n                INT: { base: 10 },\n                WIS: { base: 10 },\n                CHA: { base: 10 }\n            },\n            load: {\n                light: {\n                    \"base-speed\": \"30 (x4)\",\n                    \"max-dex\": Infinity,\n                    \"skill-penalty\": 0\n                },\n                medium: {\n                    \"base-speed\": function(fn) {\n                        return Speed.reduceBase(fn.getValue('load.light.base-speed')).toString();\n                    },\n                    \"max-dex\": 3,\n                    \"skill-penalty\": 3\n                },\n                heavy: {\n                    \"base-speed\": function(fn) {\n                        return Speed.reduceRun(fn.getValue('load.medium.base-speed')).toString();\n                    },\n                    \"max-dex\": 1,\n                    \"skill-penalty\": 6\n                },\n                lift: {\n                    \"base-speed\": \"5/round\"\n                }\n            },\n            armor: {\n                light: {\n                    \"base-speed\": function(fn) { return fn.getValue('load.light.base-speed'); }\n                },\n                medium: {\n                    \"base-speed\": function(fn) {\n                        return Speed.reduceBase(fn.getValue('armor.light.base-speed')).toString();\n                    }\n                },\n                heavy: {\n                    \"base-speed\": function(fn) {\n                        return Speed.reduceRun(fn.getValue('armor.medium.base-speed')).toString();\n                    }\n                }\n            },\n            speed: {\n                swim: function(fn) {\n                    return Speed.halfBase( fn.getCurrentSpeed() ).base + \"/round\";\n                },\n                climb: function(fn) {\n                    return Speed.halfBase( fn.getCurrentSpeed() ).base + \"/round\";\n                }\n            }\n        }\n        this.prevHistoryPushWasWithKey = '';\n        this.isLoading = false;\n        this.fn = {};\n        this.fn.handleChange =  this.handleChange.bind(this);\n        this.fn.getState = this.getState.bind(this);\n        this.fn.getClassTypeTotal = this.getClassTypeTotal.bind(this);\n        this.fn.getAbilityTotal = this.getAbilityTotal.bind(this);\n        this.fn.getAbilityMod = this.getAbilityMod.bind(this);\n        this.fn.getArmorLimitedDex = this.getArmorLimitedDex.bind(this);\n        this.fn.getCurrentLoad = this.getCurrentLoad.bind(this);\n        this.fn.getCurrentLoadName = this.getCurrentLoadName.bind(this);\n        this.fn.getArmedLoad = this.getArmedLoad.bind(this);\n        this.fn.getArmedLoadName = this.getArmedLoadName.bind(this);\n        this.fn.getLoadLevels = this.getLoadLevels.bind(this);\n        this.fn.getArmedSpeed = this.getArmedSpeed.bind(this);\n        this.fn.getCurrentSpeed = this.getCurrentSpeed.bind(this);\n        this.fn.getOverlandSpeed = this.getOverlandSpeed.bind(this);\n        this.fn.getArmedSkillCheckPenalty = this.getArmedSkillCheckPenalty.bind(this);\n        this.fn.getCurrentSkillCheckPenalty = this.getCurrentSkillCheckPenalty.bind(this);\n        this.fn.getDefault = this.getDefault.bind(this);\n        this.fn.getValue = this.getValue.bind(this);\n        window.app = this; // for console debugging\n    }\n\n    componentDidUpdate(prevProps, prevState) {\n        const title = this.getState(['info','character'])\n            + '(lvl' + this.getClassTypeTotal('levels') + ') '\n            + \"v\" + this.getState(['meta','rev'],0)\n            + \" / \" + this.getState(['meta','prevChangeTime'],'');\n        if( this.isLoading ) { // push no state while loading\n            document.title = title;\n            return;\n        }\n        let result = {};\n        function recurse (cur, prop) {\n            if ( cur === undefined ) {\n                console.debug('componentDidUpdate: skipping undefined at', prop);\n            } else if( typeof(cur) === 'function' ) {\n                console.warn( 'componentDidUpdate: function at', prop);\n            } else if (Object(cur) !== cur) {\n                console.debug( 'componentDidUpdate saving:', prop, cur, typeof cur);\n                result[prop] = cur;\n            } else if( Array.isArray( cur ) ) {\n                console.warn( 'componentDidUpdate: skipping array at', prop );\n            } else {\n                for (var p in cur) {\n                    recurse(cur[p], prop ? prop+\".\"+p : p);\n                }\n            }\n        }\n        recurse(this.state, \"\");\n        var qp = \"\";\n        for (var k in result) {\n            qp += \"&\" + k + \"=\" + encodeURIComponent( result[k] );\n        }\n        if ( ''+this.prevHistoryPushWasWithKey === ''+this.prevChangeWasToKey ) {\n            console.debug('history.replaceState', title);\n            window.history.replaceState(this.state , title, '?' + qp.slice(1).replace( /%20/g, '+' ));\n        } else {\n            console.debug('history.pushState', title);\n            window.history.pushState(this.state, title, '?' + qp.slice(1).replace( /%20/g, '+' ));\n            this.prevHistoryPushWasWithKey = this.prevChangeWasToKey;\n        }\n        document.title = title;\n    }\n\n    componentWillMount() {\n        // conversions to import old versions\n        function convertKey(k) {\n            if( k.indexOf('md.') === 0 ) return k.replace('md.', 'meta.');\n            if( STATS.indexOf( k.split('.')[0] )>-1 ) return 'stat.'+k;\n            if( k === 'info.size' || k === 'size') return 'stat.size';\n            if( k.indexOf('info') === 0 ) k = k.toLowerCase();\n            if( k.indexOf('info.init') === 0 ) return k.replace('info.init', 'init');\n            if( k.indexOf('info.speed') === 0 ) return k.replace('info.speed', 'speed');\n            if( k.indexOf('acrobatic.') > 0 ) return k.replace('acrobatic.', 'acrobatics.');\n            if( /refl*\\./.test(k) ) return k.replace(/refl*\\./, 'refl.');\n            if( k === 'note.spell1' ) return \"sp0.note\";\n            if( k.indexOf('spell1.') === 0 ) return k.replace('spell1.', 'sp0.');\n            if( k.indexOf('speed.land') === 0 ) return \"load.light.base-speed\";\n            return k;\n        }\n        function getQueryParams(qs) {\n            qs = qs.split('+').join(' ');\n            var params = {}, tokens, re = /[?&]?([^=]+)=([^&]*)/g;\n            // eslint-disable-next-line\n            while (tokens = re.exec(qs)) {\n                let key = decodeURIComponent(tokens[1]);\n                let value = decodeURIComponent(tokens[2]);\n                if( key.indexOf('prevChangeWasToKey')===0 ) continue;\n                if( value === ({}).toString() ) continue;\n                params[ convertKey( key ) ] = value;\n            }\n            return params;\n        }\n        const queryParams = getQueryParams(window.location.search);\n        this.isLoading = true;\n        if ( queryParams.state ) {\n            // depracated old state format\n            let s = JSON.parse( queryParams.state );\n            console.info( 'componentWillMount: restoring state:', s );\n            this.setState( s, restoreReady );\n        } else {\n            this.setState( (ps, pp) => {\n                for( var k in queryParams ) {\n                    this.setStateByKey( k.split('.'), queryParams[k] );\n                }\n            }, restoreReady );\n        }\n        function restoreReady() {\n            console.info( 'componentWillMount: restored state:', this.state );\n            this.prevChangeWasToKey = [\"\"];\n            this.componentDidUpdate( null, null );\n            autoresizeAll();\n            this.isLoading = false;\n        }\n    }\n\n    popstateRestore(event) {\n        console.log( 'popstate: restoring state', event.state, 'from', event );\n        this.isLoading = true;\n        this.setState( event.state, () => {\n            console.debug('popstate: forcing update');\n            this.forceUpdate( () => {\n                this.isLoading = false;\n                console.debug('popstate: restoring state complete:', this.state );\n                autoresizeAll();\n            });\n        });\n    }\n\n    componentDidMount() {\n        window.onpopstate = event => this.popstateRestore(event);\n    }\n\n    withPropKeyValue( prevState, propKey, newVal ) {\n        newVal = (newVal === parseFloat(newVal).toString()) ? parseFloat(newVal) : newVal;\n        newVal = newVal === 'false' ? false : newVal;\n        const newState = {};\n        let newLeaf = newState;\n        // eslint-disable-next-line\n        let leaf = propKey.slice(0,-1).reduce(\n            ( childState, key ) => {\n                if( childState[key] === undefined ) {\n                    return newLeaf = newLeaf[key] = {};\n                }\n                newLeaf = newLeaf[key] = {...childState[key]};\n                return childState[key];\n            }, prevState );\n        //const oldVal = leaf[propKey[propKey.length-1]];\n        newLeaf[propKey[propKey.length-1]] = newVal;\n        //console.debug('with', propKey, newState, 'was', oldVal);\n        return newState;\n    }\n    setStateByKey( propKey, newVal ) {\n        if( propKey.indexOf('.') > 0 )\n            propKey = propKey.split('.');\n        this.setState( (prevState, setProps) => {\n            const newState = this.withPropKeyValue( prevState, propKey, newVal );\n            if( !this.isLoading ) {\n                newState.meta = {\n                    prevChangeTime : new Date().toLocaleString('sv-SV'),\n                    rev : (prevState.meta && (prevState.meta.rev || 0) )+1\n                };\n            }\n            this.prevChangeWasToKey = propKey;\n            //console.log('setState', propKey, newVal, newState, 'of', prevState, setProps);\n            return newState;\n        } );\n    }\n    handleChange( propKey, mutator ) {\n        return (e) => {\n            if( mutator !== undefined ) {\n                const oldVal = this.getState( propKey );\n                const newVal = mutator( oldVal, e );\n                console.debug('handleChange mutator:', propKey, newVal, oldVal, mutator);\n                return this.setStateByKey( propKey, newVal);\n            }\n            const evval = e.target.type === 'checkbox' ? e.target.checked\n                : e.target.value;\n            const newVal =\n                typeof(evval)==='boolean' ? evval || undefined :\n                evval.length===0 ? undefined :\n                evval;\n            console.log('handleChange event', propKey, newVal, evval, e.target);\n            this.setStateByKey( propKey, newVal );\n        };\n    }\n    getState(propKey, defaultTo, type) {\n        if( !type ) type = typeof defaultTo;\n        if( type === 'number' ) {\n            const stateVal = this.getState( propKey );\n            if( undefined === defaultTo && undefined === stateVal ) return undefined;\n            return Number( this.getState( propKey ) || defaultTo );\n        }\n        if( type === 'boolean' ) {\n            return this.getState( propKey, 'false' ).toString() === 'true';\n        }\n        if( propKey.indexOf('.') > 0 )\n            propKey = propKey.split('.');\n        if( !Array.isArray(propKey) ) {\n            throw new Error('propKey must be an array or dot-separated: ' + propKey);\n        }\n        const stateVal = propKey.reduce((tree, key) =>\n            typeof tree === 'object' && key in tree ? tree[key] : undefined, this.state );\n        return stateVal !== undefined ? stateVal : defaultTo;\n    }\n    getDefault(propKey) {\n        if( propKey.indexOf('.') > 0 )\n            propKey = propKey.split('.');\n        const value = propKey.reduce((tree, key) =>\n            typeof tree === 'object' && key in tree ? tree[key] : undefined, this.default );\n        return typeof value === 'function' ? value(this.fn) : value;\n    }\n\n    getValue(propKey, defaultTo) {\n        const stateVal = this.getState( propKey, undefined, typeof defaultTo)\n        if( undefined !== stateVal ) return stateVal;\n        const defaultVal = this.getDefault( propKey );\n        if( undefined !== defaultVal ) return defaultVal;\n        return defaultTo;\n    }\n\n    getClassTypeTotal(type) {\n        return CLASSES.reduce( (sum, classN) =>\n            ( sum+this.getState([classN,type],0)), 0)\n    }\n    getAbilityTotal(ability, skipTemp=false) {\n        if (STATS.indexOf(ability) === -1) return NaN;\n        const rageBonus = this.getState(['rage','enable']) && !skipTemp\n            ? getRageState(this.fn)[ability] || 0 : 0;\n        return STAT_TYPES.filter(x=>!skipTemp||x!=='temp').reduce(\n            (sum,type) =>\n            sum + this.getValue(['stat',ability,type], 0), 0)\n            +rageBonus;\n    }\n    getAbilityMod(ability, skipTemp) {\n        return Math.round((this.getAbilityTotal(ability, skipTemp)-11)/2);\n    }\n    getArmorLimitedDex() {\n        return Math.min(\n            this.getAbilityMod('DEX'),\n            this.getState(['armor','max-dex'], Infinity),\n            this.getState(['shield','max-dex'], Infinity),\n            this.getValue('load.'+this.getLoadName(this.getArmedLoad())+'.max-dex'));\n    }\n    getCurrentLoad() {\n        return [...WEAPONS, 'armor', 'shield'].map( k => [k] )\n            .concat( Object.keys( this.state.eq || {} ).map ( k => ['eq', k] ) )\n            .reduce( (sum, key) => {\n                const propKey = [...key, 'weight'];\n                return sum + this.getState( propKey, 0 );\n            }, 0);\n    }\n    getCurrentLoadName() {\n        return this.getLoadName( this.getCurrentLoad() );\n    }\n    getArmedLoad() {\n        return [...WEAPONS, 'armor', 'shield'].map( k => [k] )\n            .reduce( (sum, key) => {\n                const propKey = [...key, 'weight'];\n                return sum + this.getState( propKey, 0 );\n            }, 0);\n    }\n    getArmedLoadName() {\n        return this.getLoadName( this.getArmedLoad() );\n    }\n    getLoadName( load ) {\n        const loadLevels = this.getLoadLevels();\n        const i=loadLevels.findIndex( function(loadLimit) { return load <= loadLimit; } );\n        return ['light', 'medium', 'heavy', 'lift', 'drag', 'overloaded'][i];\n    }\n    getLoadLevels() {\n        function baseMaxLoad(str) {\n            if( str < 11 ) return 10*str;\n            if( str > 14 ) return 2*baseMaxLoad(str-5);\n            return [115, 130, 150, 175][str-11];\n        }\n        function sizeMultiplier(sizeMod, legs) {\n            if( legs === 2) {\n                if( sizeMod < 0 ) return -sizeMod*2;\n                if( sizeMod === 0 ) return 1;\n                if( sizeMod === 1 ) return 3/4;\n                return 1/sizeMod;\n            } else if( legs === 4 ) {\n                if( sizeMod < 1 )\n                    return sizeMultiplier(sizeMod,2)*3/2;\n                if( sizeMod === 1 ) return 1;\n                if( sizeMod === 2 ) return 3/4;\n                return 2*sizeMultiplier(sizeMod,2);\n            }\n        }\n        const maxLoad = Math.floor(\n            baseMaxLoad( this.getAbilityTotal('STR') )\n            * sizeMultiplier(this.getValue(['stat','size']),\n                this.getState(['stat','legs'],2)) );\n        return [Math.floor(1/3*maxLoad),\n            Math.floor(2/3*maxLoad), maxLoad, 2*maxLoad, 5*maxLoad, Infinity];\n    }\n\n    getArmedSpeed() {\n        return Speed.min(\n            this.getValue('armor.'+this.getState('armor.type', 'Light').toLowerCase()+'.base-speed'),\n            this.getValue('load.'+this.getLoadName(this.getArmedLoad())+'.base-speed'));\n    }\n\n    getCurrentSpeed() {\n        return Speed.min(\n            this.getArmedSpeed(),\n            this.getValue('load.'+this.getCurrentLoadName()+'.base-speed') );\n    }\n\n    getOverlandSpeed() {\n        return Speed.parse(this.getCurrentSpeed()).base/10;\n    }\n\n    getArmedSkillCheckPenalty() {\n        return Math.max(\n            ( this.getState(['armor','skill-penalty'],0)\n                + this.getState(['shield','skill-penalty'],0) ),\n            this.getValue('load.'+this.getArmedLoadName()+'.skill-penalty', NaN) );\n    }\n\n    getCurrentSkillCheckPenalty() {\n        return Math.max(\n            this.getArmedSkillCheckPenalty(),\n            this.getValue('load.'+this.getCurrentLoadName()+'.skill-penalty', NaN) );\n    }\n\n    render() {\n        return (\n            <Form>\n                <AddfieldsNavbar {...this.fn} {...this.state} />\n                <Grid fluid>\n                    <InfoRow {...this.fn} {...this.state} />\n                    <Row>\n                        <Col md={5}>\n                            <Row>\n                                <Col xs={8} sm={9}>\n                                    <AbilityTable {...this.fn} {...this.state} />\n                                </Col>\n                                <SizeField className=\"note-col\" {...this.fn} {...this.state} sm={3} xs={4}/>\n                                <Col xs={4} sm={3} className=\"note-col\">\n                                    <NoteArea {...this.fn} noteKey=\"ability\" val={this.getState('note.ability')} />\n                                </Col>\n                            </Row>\n                        </Col>\n                        <Col md={7}>\n                            <ClassTable {...this.fn} {...this.state} />\n                        </Col>\n                    </Row>\n                    <Row>\n                        <Col md={7}>\n                            <Row>\n                                <Col xs={7}>\n                                    <InitTable {...this.fn} {...this.state}/>\n                                    <ResistanceTable {...this.fn} {...this.state}/>\n                                </Col>\n                                <Col xs={5}>\n                                    <HPTable {...this.fn} {...this.state}/>\n                                </Col>\n                            </Row>\n                            <ACTable {...this.fn} {...this.state}/>\n                            <Row>\n                                <Col xs={8}>\n                                    <SaveTable {...this.fn} {...this.state}/>\n                                </Col>\n                                <Col xs={4} className=\"note-col\">\n                                    <NoteArea {...this.fn} noteKey=\"save\" val={this.getState('note.save')} />\n                                </Col>\n                            </Row>\n                            <Row>\n                                <Col xs={8}>\n                                    <AttackTable {...this.fn} {...this.state} />\n                                </Col>\n                                <Col xs={4} className=\"note-col\">\n                                    <NoteArea {...this.fn} noteKey=\"attack\" val={this.getState('note.attack')} />\n                                </Col>\n                            </Row>\n                            <ArmorTable {...this.fn}/>\n                        </Col>\n                        <Col md={5}>\n                            <SkillTable {...this.fn} {...this.state} />\n                        </Col>\n                        <Col xs={12}>\n                            <WeaponTable {...this.fn} {...this.state}/>\n                        </Col>\n                    </Row>\n                    <RagePanel {...this.fn} {...this.state} />\n                    <Row>\n                        <Col sm={12} md={6} className=\"note-col\">\n                            <NoteArea {...this.fn} noteKey=\"feat\" val={this.getState('note.feat')} />\n                        </Col>\n                        <Col sm={12} md={6} className=\"note-col\">\n                            <NoteArea {...this.fn} noteKey=\"character\" val={this.getState('note.character')} />\n                        </Col>\n                    </Row>\n                    <Row>\n                        <Col sm={12} md={6} className=\"note-col\">\n                            <NoteArea {...this.fn} noteKey=\"special\" val={this.getState('note.special')} />\n                        </Col>\n                        <Col sm={12} md={6} className=\"note-col\">\n                            <NoteArea {...this.fn} noteKey=\"equipment\" val={this.getState('note.equipment')} />\n                        </Col>\n                    </Row>\n                    <EquipmentTable {...this.fn} {...this.state} />\n                    <Row>\n                        <Col sm={7}>\n                            <SpeedTable {...this.fn} {...this.state} />\n                            <NoteArea {...this.fn} {...this.state} placeholder=\"Speed and load notes\" onerow\n                                propKey={['load','note']} val={this.getState('load.note')}/>\n                        </Col>\n                        <Col sm={5}><LoadTable {...this.fn} {...this.state} /></Col>\n                    </Row>\n                    <SpellcasterPanels {...this.fn} {...this.state} />\n                </Grid>\n            </Form>\n        );\n    }\n}\n\nfunction ColText(props) {\n    return (\n        <Col bsClass=\"col\" xs={props.xs || Math.min(props.sm*2, 12)} sm={props.sm}>\n            <FormGroup validationState={props.validationState}>\n                <ControlLabel>\n                    <small>{props.label}</small>\n                </ControlLabel>\n                <FormControl.Static>\n                    {props.children}\n                </FormControl.Static>\n            </FormGroup>\n        </Col>\n    );\n}\n\nfunction ColTextField(props) {\n    const label = props.label || props.propKey[props.propKey.length-1];\n    return (\n        <Col bsClass=\"col\" xs={props.xs || Math.min(props.sm*2, 12)} sm={props.sm}>\n            <FormGroup validationState={props.validationState}\n                controlId={props.propKey.join('-')} >\n                <ControlLabel className=\"text-capitalize\">\n                    <small>{label}</small>\n                </ControlLabel>\n                <FormControl type=\"text\"\n                    value={props.getState(props.propKey,'')}\n                    onChange={props.handleChange(props.propKey)}\n                />\n            </FormGroup>\n        </Col>\n    );\n}\n\nfunction SizeField(props) {\n    const sizeValues = [8,4,2,1,0,-1,-2,-4,-8];\n    const sizeOptions = ['Fine','Diminutive','Tiny','Small','Medium'\n        ,'Large','Huge','Gargantuan','Colossal'].map( (sizeName,index) =>\n        <option key={sizeName} value={sizeValues[index]}>\n            {sizeName+': '+sizeValues[index]}</option> );\n    const statePropKey = ['stat', 'size'];\n    return (\n        <Col {...props} bsClass=\"col\" xs={props.xs || Math.min(props.sm*2, 12)}>\n            <FormGroup controlId={statePropKey.join('-')} bsSize=\"sm\">\n                <ControlLabel>\n                    <small>Size</small>\n                </ControlLabel>\n                <FormControl componentClass=\"select\"\n                    value={props.getValue(statePropKey)}\n                    onChange={props.handleChange(statePropKey)}>\n                    {sizeOptions}\n                </FormControl>\n            </FormGroup>\n        </Col>\n    );\n}\n\nconst InfoRow = compose(\n    onlyUpdateForKeys(['info','stat']), pure)(InfoRowImpl);\nfunction InfoRowImpl(props) {\n    return (\n        <div>\n            <Row>\n                <ColTextField {...props} propKey={['info','character']} xs={7} sm={6}/>\n                <ColTextField {...props} propKey={['info','player']} xs={3} sm={4}/>\n                <ColText label=\"Minify\" xs={2} sm={2}>\n                    <Button\n                        bsSize=\"sm\" bsStyle=\"info\" target=\"_blank\"\n                        href=\"javascript:void(location.href='http://tinyurl.com/create.php?url='+encodeURIComponent(location.href))\">\n                        tinyurl</Button>\n                </ColText>\n            </Row>\n            <Row>\n                <ColTextField {...props} propKey={['info','race']} sm={2}/>\n                <ColTextField {...props} propKey={['info','gender']} sm={1}/>\n                <ColTextField {...props} propKey={['info','height']} xs={3} sm={1}/>\n                <ColTextField {...props} propKey={['info','weight']} xs={3} sm={1}/>\n                <ColTextField {...props} propKey={['info','hair']} sm={2}/>\n                <ColTextField {...props} propKey={['info','eyes']} sm={2}/>\n                <ColTextField {...props} propKey={['info','skin']} sm={2}/>\n                <ColTextField {...props} propKey={['info','age']} sm={1}/>\n                <ColTextField {...props} propKey={['info','alignment']} sm={2}/>\n                <ColTextField {...props} propKey={['info','deity']} sm={3}/>\n                <ColTextField {...props} propKey={['info','homeland and occupation']} sm={7}/>\n                <ColTextField {...props} propKey={['info','languages']} sm={12}/>\n            </Row>\n        </div>\n    );\n}\n\nfunction StatRow(props) {\n    const ability=props.ability;\n    //console.log('row base for '+ability+':', props.getState(['stat',ability,'base']);\n    const raging = props.getState(['rage','enable'],false);\n    const rageBonus = raging ? getRageState(props)[ability] : 0;\n    const abilityFields = STAT_TYPES.map( (type) =>\n        <td key={type}>\n            <TextField {...props} propKey={['stat',ability,type]} />\n        </td>\n    ).concat( <td key=\"rage\" className={raging?\"\":\"hidden\"}>{rageBonus||\"\"}</td>);\n    return (\n        <tr>\n            <th className=\"active\">{ability}</th>\n            <td>{props.getAbilityTotal(ability)}</td>\n            <th className=\"success\">{props.getAbilityMod(ability)}</th>\n            {abilityFields}\n        </tr>\n    );\n}\n\nconst AbilityTable = compose(\n    onlyUpdateForKeys(['stat','rage']), pure)(AbilityTableImpl);\nfunction AbilityTableImpl(props) {\n    const raging = props.getState(['rage','enable'],false);\n    return (\n        <Table condensed className=\"ability-table\">\n            <thead>\n                <tr>\n                    <th><small>Ability</small></th>\n                    <th><small>Total</small></th>\n                    <th><small>Mod</small></th>\n                    <th className=\"ability-base\"><small>Base</small></th>\n                    <th><small>Enh<span className=\"hidden-xs hidden-md\">ance</span></small></th>\n                    <th><small>Misc</small></th>\n                    <th><small>Temp</small></th>\n                    <th className={raging?\"\":\"hidden\"}><small>Rage</small></th>\n                </tr>\n            </thead>\n            <tbody>\n                <StatRow {...props} ability=\"STR\" />\n                <StatRow {...props} ability=\"DEX\" />\n                <StatRow {...props} ability=\"CON\" />\n                <StatRow {...props} ability=\"INT\" />\n                <StatRow {...props} ability=\"WIS\" />\n                <StatRow {...props} ability=\"CHA\" />\n            </tbody>\n        </Table>\n    );\n}\n\nfunction TextField(props) {\n    const placeholder = props.placeholder || props.getDefault( props.propKey );\n    //console.debug(props.propKey, props.getState(props.propKey));\n    return (\n        <FormControl type=\"text\"\n            id={props.propKey.join('-')}\n            value={props.getState(props.propKey, '')}\n            onChange={props.handleChange(props.propKey)}\n            placeholder={placeholder}\n            className={props.className||''}\n        />\n    );\n}\n\nconst NoteArea = pure(NoteAreaImpl);\nfunction NoteAreaImpl(props) {\n    const id = (props.noteKey && props.noteKey + '-note') || props.propKey.join('-');\n    const propKey = props.propKey || ['note', props.noteKey];\n    const role = props.noteKey || props.propKey[props.propKey.length-1];\n    const className = [props.className\n        ,\"autoresize\"\n        ,propKey.join('-')\n        ,props.onerow ? \"onerow\" : \"\"].join(' ');\n    return (\n        <FormGroup controlId={id}>\n            <FormControl componentClass=\"textarea\"\n                inputRef={addAutoresize}\n                className={className}\n                value={props.getState(propKey,'')}\n                onChange={props.handleChange(propKey)}\n                placeholder={props.placeholder || role+\" notes\"} />\n        </FormGroup>\n    );\n}\n\nfunction NoPrintAbbr(props) {\n    return (\n        <span>\n            <abbr className=\"hidden-print\" title={props.title}>{props.children}</abbr>\n            <span className=\"visible-print-block\">{props.children}</span>\n        </span>\n    );\n}\n\nconst ClassRow = pure(ClassRowImpl);\nfunction ClassRowImpl(props) {\n    const rowName = props.name;\n    const classFields = CLASS_TYPES.map( (type) =>\n    <td key={type}><TextField {...props} propKey={[rowName,type]} /></td>\n    );\n    return (\n        <tr>\n            {classFields}\n        </tr>\n    );\n}\n\nconst ClassTable = compose(\n    onlyUpdateForKeys([...CLASSES]), pure)(ClassTableImpl);\nfunction ClassTableImpl(props) {\n    const classRows = CLASSES.map( function(classN,i) {\n        if ( i>0 && isEmpty(props.getState(['class'+i]))\n            && isEmpty(props.getState(['class'+(i+1)])) ) return null;\n        return <ClassRow key={classN} {...props} name={classN} val={props[classN]} />;\n    } );\n    return (\n        <Table condensed>\n            <thead>\n                <tr>\n                    <th className=\"class-name\"><small>Classname</small></th>\n                    <th><small>HD</small></th>\n                    <th className=\"min-width-3-digits\"><small>HP</small></th>\n                    <th className=\"min-width-3-digits\"><small>Skill</small></th>\n                    <th><small>BAB</small></th>\n                    <th><small>FORT</small></th>\n                    <th><small>REF</small></th>\n                    <th><small>WILL</small></th>\n                    <th><small>Levels</small></th>\n                </tr>\n            </thead>\n            <tbody>\n                { classRows }\n                <tr>\n                    <th>Base totals</th>\n                    <td></td>\n                    <td>{props.getClassTypeTotal('hp')}</td>\n                    <td>{props.getClassTypeTotal('skill')}</td>\n                    <td>{props.getClassTypeTotal('bab')}</td>\n                    <td>{props.getClassTypeTotal('fort')}</td>\n                    <td>{props.getClassTypeTotal('refl')}</td>\n                    <td>{props.getClassTypeTotal('will')}</td>\n                    <td>{props.getClassTypeTotal('levels')}</td>\n                </tr>\n            </tbody>\n        </Table>\n    );\n}\n\nconst HPTable = compose(\n    onlyUpdateForKeys(['hp', 'stat', ...CLASSES, 'rage']), pure)(HPTableImpl);\nfunction HPTableImpl(props) {\n    const totalHP = props.getAbilityMod('CON')*props.getClassTypeTotal('levels')\n        +props.getClassTypeTotal('hp');\n    return (\n        <Table condensed className=\"hp-table\">\n            <thead>\n                <tr>\n                    <th className=\"active\"><small>HP (con*lvl+cls)</small></th>\n                    <td>{totalHP}</td>\n                </tr>\n            </thead>\n            <tbody>\n                <tr>\n                    <th className=\"active hp-temporary\">Temporary HP</th>\n                    <td><TextField {...props} propKey={['hp','temp']} /></td>\n                </tr>\n                <tr>\n                    <th className=\"active\">Subdual dam</th>\n                    <td><TextField {...props} propKey={['hp','subdual']} /></td>\n                </tr>\n                <tr>\n                    <th className=\"active\">Lethal dam</th>\n                    <td><TextField {...props} propKey={['hp','lethal']} /></td>\n                </tr>\n                <tr>\n                    <th className=\"active\">Current HP</th>\n                    <td className=\"success\">{\n                            totalHP\n                            + props.getState(['hp','temp'], 0)\n                            - props.getState(['hp','subdual'], 0)\n                            - props.getState(['hp','lethal'], 0)\n                    }</td>\n            </tr>\n        </tbody>\n    </Table>\n    );\n}\n\nconst InitTable = compose(\n    onlyUpdateForKeys(['init', 'stat']), pure)(InitTableImpl);\nfunction InitTableImpl(props) {\n    const initTotal = props.getAbilityMod('DEX')\n        + props.getState(['init','enh'],0)\n        + props.getState(['init','misc'],0)\n        + props.getState(['init','temp'],0);\n    return (\n        <Table condensed>\n            <thead>\n                <tr>\n                    <th></th>\n                    <th><small>Total</small></th>\n                    <th><small>Base</small></th>\n                    <th><small>Enhance</small></th>\n                    <th><small>Misc</small></th>\n                    <th><small>Temp</small></th>\n                </tr>\n            </thead>\n            <tbody>\n                <tr>\n                    <th className=\"active\">Init</th>\n                    <th className=\"success\">{initTotal}</th>\n                    <td>{props.getAbilityMod('DEX')}</td>\n                    <td><TextField {...props} propKey={['init','enh']} /></td>\n                    <td><TextField {...props} propKey={['init','misc']} /></td>\n                    <td><TextField {...props} propKey={['init','temp']} /></td>\n                </tr>\n            </tbody>\n        </Table>\n    );\n}\n\nconst ResistanceTable = compose(\n    onlyUpdateForKeys(['info']), pure)(ResistanceTableImpl);\nfunction ResistanceTableImpl(props) {\n    return (\n        <Table condensed>\n            <tbody>\n                <tr>\n                    <th className=\"active\">DR</th>\n                    <td><TextField {...props} propKey={['info','dr']} /></td>\n                    <th className=\"active\">SR</th>\n                    <td><TextField {...props} propKey={['info','sr']} /></td>\n                </tr>\n                <tr>\n                    <th className=\"active\">Resists</th>\n                    <td colSpan=\"3\"><TextField {...props} propKey={['info','resists']} /></td>\n                </tr>\n            </tbody>\n        </Table>\n    );\n}\n\nfunction SpeedTable(props) {\n    return (\n        <div>\n            <Table condensed>\n                <thead>\n                    <tr>\n                        <th>Speed</th>\n                        <th><small>combat equipped</small></th>\n                        <th><small>all equipment</small></th>\n                        <th><small>Overland mph</small></th>\n                        <th><small>Misc note</small></th>\n                        <th><small>Temp note</small></th>\n                    </tr>\n                </thead>\n                <tbody>\n                    <tr>\n                        <th className=\"active\">Land</th>\n                        <td className=\"success\">{props.getArmedSpeed()}</td>\n                        <td className=\"info\">{props.getCurrentSpeed()}</td>\n                        <td>{props.getOverlandSpeed()}</td>\n                        <td><TextField {...props} propKey={['speed','misc']} /></td>\n                        <td><TextField {...props} propKey={['speed','temp']} /></td>\n                    </tr>\n                </tbody>\n            </Table>\n            <Table condensed>\n                <tbody>\n                    <tr>\n                        <th className=\"active\"><small>Swim</small></th>\n                        <td><TextField {...props} propKey={['speed','swim']} /></td>\n                        <th className=\"active\"><small>Climb</small></th>\n                        <td><TextField {...props} propKey={['speed','climb']} /></td>\n                        <th className=\"active\"><small>Fly</small></th>\n                        <td><TextField {...props} propKey={['speed','fly']} /></td>\n                        <th className=\"active\"><small>Burrow</small></th>\n                        <td><TextField {...props} propKey={['speed','burrow']} /></td>\n                    </tr>\n                </tbody>\n            </Table>\n        </div>\n    );\n}\n\nconst ACTable = compose(\n    onlyUpdateForKeys(['stat','armor','shield','ac','rage']), pure)(ACTableImpl);\nfunction ACTableImpl(props) {\n    const raging = props.getState(['rage','enable'],false);\n    const rageBonus = raging ? getRageState(props)['ac'] : 0;\n    const flatFootDexPenalty = Math.min( 0, props.getArmorLimitedDex() );\n    return (\n        <Table condensed>\n            <thead>\n                <tr>\n                    <th><small>Defence</small></th>\n                    <th><small>Total</small></th>\n                    <th className=\"hidden-xs\"></th>\n                    <th><small>Armor</small></th>\n                    <th><small>Shield</small></th>\n                    <th><small>Dex</small></th>\n                    <th><small>Size</small></th>\n                    <th><small>Dodge</small></th>\n                    <th><small>Natural</small></th>\n                    <th><small>Deflect</small></th>\n                    <th><small>Misc</small></th>\n                    <th><small>Temp</small></th>\n                    <th className={raging?\"\":\"hidden\"}><small>Rage</small></th>\n                </tr>\n            </thead>\n            <tbody>\n                <tr>\n                    <th className=\"active\">AC</th>\n                    <th className=\"success\">\n                        {10\n                                +props.getState(['armor','ac'],0)\n                                +props.getState(['shield','ac'],0)\n                                +props.getArmorLimitedDex()\n                                +props.getState(['stat','size'],0)\n                                +props.getState(['ac','dodge'],0)\n                                +props.getState(['ac','natural'],0)\n                                +props.getState(['ac','deflect'],0)\n                                +props.getState(['ac','ac-misc'],0)\n                                +props.getState(['ac','temp'],0)\n                                +rageBonus}\n                            </th>\n                            <td className=\"hidden-xs\"><small>10+</small></td>\n                            <td>{props.getState(['armor','ac'],'')}</td>\n                            <td>{props.getState(['shield','ac'],'')}</td>\n                            <td>{props.getArmorLimitedDex()}</td>\n                            <td>{props.getState(['stat','size'],'')}</td>\n                            <td><TextField {...props} propKey={['ac','dodge']} /></td>\n                            <td><TextField {...props} propKey={['ac','natural']} /></td>\n                            <td><TextField {...props} propKey={['ac','deflect']} /></td>\n                            <td><TextField {...props} propKey={['ac','ac-misc']} /></td>\n                            <td><TextField {...props} propKey={['ac','temp']} /></td>\n                            <td className={raging?\"\":\"hidden\"}><small>{rageBonus}</small></td>\n                        </tr>\n                        <tr>\n                            <th className=\"active\">Touch</th>\n                            <th className=\"success\">\n                                {10+props.getArmorLimitedDex()\n                                        +props.getState(['stat','size'],0)\n                                        +props.getState(['ac','dodge'],0)\n                                        +props.getState(['ac','deflect'],0)\n                                        +props.getState(['ac','touch-misc'],0)\n                                        +props.getState(['ac','temp'],0)\n                                        +rageBonus}\n                                    </th>\n                                    <td className=\"hidden-xs\"><small>10+</small></td>\n                                    <td>-</td>\n                                    <td>-</td>\n                                    <td>{props.getArmorLimitedDex()}</td>\n                                    <td>{props.getState(['stat','size'],'')}</td>\n                                    <td>{props.getState(['ac','dodge'],'')}</td>\n                                    <td>-</td>\n                                    <td>{props.getState(['ac','deflect'],'')}</td>\n                                    <td><TextField {...props} propKey={['ac','touch-misc']} /></td>\n                                    <td>{props.getState(['ac','temp'],'')}</td>\n                                    <td className={raging?\"\":\"hidden\"}><small>{rageBonus}</small></td>\n                                </tr>\n                                <tr>\n                                    <th className=\"active\">Flat-foot</th>\n                                    <th className=\"success\">\n                                        {10\n                                                +props.getState(['armor','ac'],0)\n                                                +props.getState(['shield','ac'],0)\n                                                +props.getState(['stat','size'],0)\n                                                +props.getState(['ac','natural'],0)\n                                                +props.getState(['ac','deflect'],0)\n                                                +props.getState(['ac','ff-misc'],0)\n                                                +props.getState(['ac','temp'],0)\n                                                +flatFootDexPenalty\n                                            +rageBonus}\n                                        </th>\n                                        <td className=\"hidden-xs\"><small>10+</small></td>\n                                        <td>{props.getState(['armor','ac'],'')}</td>\n                                        <td>{props.getState(['shield','ac'],'')}</td>\n                                        <td>{flatFootDexPenalty}</td>\n                                        <td>{props.getState(['stat','size'],'')}</td>\n                                        <td>-</td>\n                                        <td>{props.getState(['ac','natural'],'')}</td>\n                                        <td>{props.getState(['ac','deflect'],'')}</td>\n                                        <td><TextField {...props} propKey={['ac','ff-misc']} /></td>\n                                        <td>{props.getState(['ac','temp'],'')}</td>\n                                        <td className={raging?\"\":\"hidden\"}><small>{rageBonus}</small></td>\n                                    </tr>\n                                </tbody>\n                            </Table>\n                        );\n}\n\nfunction SaveTableRow(props) {\n    const raging = props.getState(['rage','enable'],false);\n    const rageBonus = raging ? getRageState(props)[props.save] || 0 : 0;\n    return (\n        <tr>\n            <th className=\"active line-height-1\">{props.save.toUpperCase()}\n                <small> ({props.ability})</small></th>\n            <th className=\"success\">{\n                    props.getClassTypeTotal(props.save)\n                    +props.getAbilityMod(props.ability)\n                    +props.getState([props.save,'enhance'],0)\n                    +props.getState([props.save,'misc'],0)\n                    +props.getState([props.save,'temp'],0)\n                    +rageBonus }</th>\n                <td>{props.getClassTypeTotal(props.save)}</td>\n                <td>{props.getAbilityMod(props.ability)}</td>\n                <td><TextField {...props} propKey={[props.save,'enhance']}/></td>\n                <td><TextField {...props} propKey={[props.save,'misc']}/></td>\n                <td><TextField {...props} propKey={[props.save,'temp']}/></td>\n                <td className={raging?\"\":\"hidden\"}><small>{rageBonus||\"\"}</small></td>\n            </tr>\n        );\n}\n\nconst SaveTable = compose(\n    onlyUpdateForKeys([...SAVES,'stat',...CLASSES,'rage']), pure)(SaveTableImpl);\nfunction SaveTableImpl(props) {\n    const raging = props.getState(['rage','enable'],false);\n    return (\n        <Table condensed>\n            <thead>\n                <tr>\n                    <th className=\"save-name\">\n                        <small>Save</small>\n                    </th>\n                    <th><small>Total</small></th>\n                    <th><small><span className=\"hidden-xs\">Class </span>base</small></th>\n                    <th><small>Abil<span className=\"hidden-xs\">ity</span></small></th>\n                    <th><small>Enh<span className=\"hidden-xs\">ance</span></small></th>\n                    <th><small>Misc</small></th>\n                    <th><small>Temp</small></th>\n                    <th className={raging?\"\":\"hidden\"}><small>Rage</small></th>\n                </tr>\n            </thead>\n            <tbody>\n                <SaveTableRow {...props} save=\"fort\" ability=\"CON\"/>\n                <SaveTableRow {...props} save=\"refl\" ability=\"DEX\"/>\n                <SaveTableRow {...props} save=\"will\" ability=\"WIS\"/>\n            </tbody>\n        </Table>\n    );\n}\n\nconst AttackTable = compose(\n    onlyUpdateForKeys([...CLASSES, 'stat','rage','melee','ranged','cmb','cmd']),\n    pure )( AttackTableImpl );\nfunction AttackTableImpl(props) {\n    const strMod = props.getAbilityMod('STR');\n    const dexMod = props.getAbilityMod('DEX');\n    const sizeMod = props.getState(['stat','size'],0);\n    const cmbAbilityMod = sizeMod < 2 ? strMod : dexMod;\n    const attackRows = [\n        {name: 'melee', ability: strMod, size: sizeMod}\n        ,{name: 'ranged', ability: dexMod, size: sizeMod}\n    ].map( attack =>\n    <tr key={attack['name']}>\n        <th className=\"active\">{attack['name'].toUpperCase()}</th>\n        <th className=\"success\">\n            { props.getClassTypeTotal('bab')\n                    + attack['ability']\n                    + attack['size']\n                    + props.getState([attack['name'],'misc'],0)\n                    + props.getState([attack['name'],'temp'],0)\n            }</th>\n        <td className=\"hidden-xs\"></td>\n        <td>{props.getClassTypeTotal('bab')}</td>\n        <td>{attack['ability']}</td>\n        <td>{attack['size']}</td>\n        <td><TextField {...props} propKey={[attack['name'],'misc']}/></td>\n        <td><TextField {...props} propKey={[attack['name'],'temp']}/></td>\n    </tr>\n    );\n    return (\n        <Table condensed>\n            <thead>\n                <tr>\n                    <th className=\"attack-name\">\n                        <small>Attack</small>\n                    </th>\n                    <th><small>Total</small></th>\n                    <th className=\"hidden-xs\"></th>\n                    <th><small>BAB</small></th>\n                    <th><small>Abil<span className=\"hidden-xs\">ity</span></small></th>\n                    <th><small>Size</small></th>\n                    <th><small>Misc</small></th>\n                    <th><small>Temp</small></th>\n                </tr>\n            </thead>\n            <tbody>\n                {attackRows}\n                <tr>\n                    <th className=\"active\">CMB</th>\n                    <th className=\"success\">\n                        {\n                            props.getClassTypeTotal('bab')\n                                + cmbAbilityMod\n                                - sizeMod\n                                + props.getState(['cmb','misc'],0)\n                                + props.getState(['cmb','temp'],0)\n                        }</th>\n                    <td className=\"hidden-xs\"></td>\n                    <td>{props.getClassTypeTotal('bab')}</td>\n                    <td><NoPrintAbbr title=\"STR for small and larger, DEX for tiny and smaller. Use the misc modifier to adjust for the Agile Maneuvers feat.\">{cmbAbilityMod}</NoPrintAbbr></td>\n                    <td><NoPrintAbbr title=\"*special* size modifier\">{-sizeMod}</NoPrintAbbr></td>\n                    <td><TextField {...props} propKey={['cmb','misc']}/></td>\n                    <td><TextField {...props} propKey={['cmb','temp']}/></td>\n                </tr>\n                <tr>\n                    <th className=\"active\">CMD</th>\n                    <th className=\"success\">\n                        { 10\n                                + props.getClassTypeTotal('bab')\n                                + strMod + dexMod\n                                + props.getState(['ac','dodge'],0)\n                                + props.getState(['ac','deflect'],0)\n                                - sizeMod\n                                + props.getState(['cmd','misc'],0)\n                                + props.getState(['cmd','temp'],0)\n                        }</th>\n                    <td className=\"hidden-xs\"><small>10+</small></td>\n                    <td>{props.getClassTypeTotal('bab')}</td>\n                    <td><NoPrintAbbr title=\"STR+DEX+dodge+deflect\">\n                            {\n                                strMod + dexMod\n                                + props.getState(['ac','dodge'],0)\n                                    + props.getState(['ac','deflect'],0)\n                            }</NoPrintAbbr></td>\n                    <td><NoPrintAbbr title=\"*special* size modifier\">{-sizeMod}</NoPrintAbbr></td>\n                    <td><NoPrintAbbr title=\"Add here any insight, luck, morale, profane, and sacred bonuses to AC\"><TextField {...props} propKey={['cmd','misc']}/></NoPrintAbbr></td>\n                    <td><TextField {...props} propKey={['cmd','temp']}/></td>\n                </tr>\n            </tbody>\n        </Table>\n    );\n}\n\nfunction ArmorTable(props) {\n    const armorKeys = ['ac','max-dex','skill-penalty',\n        'spell-fail','weight'];\n    const armorControls = armorKeys.map( (key) =>\n    <td key={key}><TextField {...props} propKey={['armor',key]} /></td>\n    );\n    const shieldControls = armorKeys.map( (key) =>\n        <td key={key}><TextField {...props} propKey={['shield',key]} /></td>\n    );\n    return (\n        <Table condensed className=\"armor-table\">\n            <thead>\n                <tr>\n                    <th></th>\n                    <th className=\"armor-name\">\n                        <small>Armor name & description</small>\n                    </th>\n                    <th><small>AC Bonus</small></th>\n                    <th><small>Max Dex</small></th>\n                    <th><small>Check penalty</small></th>\n                    <th><small>Spell fail</small></th>\n                    <th><small>Weight</small></th>\n                    <th><small>Type</small></th>\n                </tr>\n            </thead>\n            <tbody>\n                <tr>\n                    <th className=\"active\"><small>Armor</small></th>\n                    <td><NoteArea {...props} propKey={['armor','desc']}\n                        placeholder=\"armor note\" onerow /></td>\n                {armorControls}\n                <td>\n                    <SelectField {...props} propKey={['armor','type']} options={ARMOR_TYPES}\n                        className=\"appearance-none\"/>\n                </td>\n            </tr>\n            <tr>\n                <th className=\"active\"><small>Shield</small></th>\n                <td><NoteArea {...props} propKey={['shield','desc']}\n                    placeholder=\"shield note\" onerow /></td>\n            {shieldControls}\n        </tr>\n    </tbody>\n</Table>\n    );\n}\n\nconst WeaponTable = compose(\n    onlyUpdateForKeys(WEAPONS), pure)(WeaponTableImpl);\nfunction WeaponTableImpl(props) {\n    const weaponKeys = ['bonus','dmg','crit',\n        'range','type','weight'];\n    let weaponRows = [];\n    for( var i = 0; i<20; i++) {\n        if ( i>0 && isEmpty( props.getState(['weapon'+(i-1)])) ) break;\n        const cells = weaponKeys.map( (key) =>\n        <td key={key}><TextField {...props} propKey={['weapon'+i,key]} /></td>\n    );\n        const row = <tr key={i}>\n            <td><NoteArea {...props} propKey={['weapon'+i,'desc']}\n                placeholder=\"name\" onerow /></td>\n        {cells}\n        <td><NoteArea {...props} propKey={['weapon'+i,'note']}\n            placeholder=\"notes\" onerow /></td>\n</tr>;\nweaponRows = [...weaponRows,row];\n    }\n    return (\n        <Table condensed className=\"weapon-table\">\n            <thead>\n                <tr>\n                    <th className=\"weapon-name\">\n                        <small>Weapon name & description</small>\n                    </th>\n                    <th className=\"weapon-bonus\"><small>Attack bonus</small></th>\n                    <th className=\"weapon-damage\"><small>Damage</small></th>\n                    <th className=\"weapon-critical\"><small>Critical</small></th>\n                    <th className=\"weapon-range\"><small>Range</small></th>\n                    <th className=\"weapon-type\"><small>Type</small></th>\n                    <th className=\"weapon-weight\"><small>Weight</small></th>\n                    <th><small>Notes & ammo</small></th>\n                </tr>\n            </thead>\n            <tbody>\n                {weaponRows}\n            </tbody>\n        </Table>\n    );\n}\n\nfunction CheckboxField(props) {\n    const {propKey, inline} = props;\n    return (\n        <FormGroup controlId={propKey.join('-')}>\n            <Checkbox inline={inline}\n                checked={props.getState(propKey)}\n                onChange={props.handleChange(propKey)}>\n                {props.children}\n            </Checkbox>\n        </FormGroup>\n    );\n}\nfunction SelectField(props) {\n    const {propKey, className, options} = props;\n    const currVal = props.getState(propKey);\n    const emptyOption = options.indexOf(currVal) > -1 ? \"\" : <option />\n    const optionList = options.map( (option,index) =>\n    <option key={option} value={option}>{option}</option> );\n    return (\n        <FormGroup controlId={propKey.join('-')} bsSize={props.bsSize||\"sm\"}>\n            <FormControl componentClass=\"select\"\n                className={className}\n                placeholder={props.getState(propKey)}\n                value={props.getState(propKey)}\n                onChange={props.handleChange(propKey)}>\n                {emptyOption}\n                {optionList}\n            </FormControl>\n        </FormGroup>\n    );\n}\n\nconst SKILL_AC_PENALTY_ABILITIES = ['STR','DEX'];\nfunction CustomSkillRow(props) {\n    const {propKey} = props;\n    const abilityKey = [...propKey,'ability'];\n    const ability = props.getState(abilityKey);\n    const hasAcPenalty = SKILL_AC_PENALTY_ABILITIES.indexOf(ability) > -1;\n    const nameField = <span>\n        <TextField {...props} propKey={[...propKey,'categ']} />\n        {hasAcPenalty ? \"*\" : \"\"}\n    </span>;\n    const abilityField = <SelectField {...props} propKey={abilityKey} options={STATS} />;\n    const empty = isEmpty(props.getState([...propKey,'categ'],{}));\n    return (<SkillRowBase {...props} nameField={nameField} ability={ability}\n    abilityField={abilityField} hasAcPenalty={hasAcPenalty} empty={empty} />);\n}\nfunction SkillRow(props) {\n    const {propKey,name,ability,hasCategory} = props;\n    const hasAcPenalty = SKILL_AC_PENALTY_ABILITIES.indexOf(ability) > -1;\n    const dispName = name + (hasCategory ? ': ': '');\n    const categoryField = hasCategory\n        ? <TextField {...props} propKey={[...propKey,'categ']}/>\n        : \"\";\n    const nameField = <span>{dispName}{categoryField}</span>;\n    return (<SkillRowBase {...props} nameField={nameField} ability={ability}\n    abilityField={ability} hasAcPenalty={hasAcPenalty} />);\n}\n\nfunction SkillRowBase(props) {\n    const {propKey,nameField,ability,abilityField,hasAcPenalty,isUntrainedUse,empty} = props;\n    const ranks = props.getState([...propKey,'ranks']);\n    const isClass = props.getState([...propKey,'is-class']);\n    return (<tr>\n        <td className=\"skill-name\">\n            <CheckboxField {...props} inline propKey={[...propKey,'is-class']}>\n                <small>{nameField}</small></CheckboxField></td>\n        <td className=\"skill-ability\"><small>{empty?'':abilityField}</small></td>\n        <th className=\"success\"><small>{\n                    isUntrainedUse || ranks !== undefined ?\n                    props.getState([...propKey,'ranks'],0)\n                + props.getAbilityMod(ability)\n                + (ranks>0 && isClass ? 3 : 0)\n                + props.getState([...propKey,'misc'],0)\n                + props.getState([...propKey,'temp'],0)\n                - (hasAcPenalty ? props.getCurrentSkillCheckPenalty() : 0 )\n                + (hasAcPenalty ? '*': '')\n                : \"\"\n        }</small></th>\n<td><small><TextField {...props} propKey={[...propKey,'ranks']}/></small></td>\n<td><small>{empty?'':props.getAbilityMod(ability)}</small></td>\n<td><small>{ranks>0 && isClass ? 3 : 0}</small></td>\n<td><small><TextField {...props} propKey={[...propKey,'misc']}/></small></td>\n<td><small><TextField {...props} propKey={[...propKey,'temp']}/></small></td>\n    </tr>);\n}\n\nconst SkillTable = compose(\n    onlyUpdateForKeys(['skill', 'stat', 'armor', 'shield', ...CLASSES, 'load', 'eq', ...WEAPONS]),\n    pure)(SkillTableImpl);\nfunction SkillTableImpl(props) {\n    const SKILL_ABILITIES = ['DEX', 'INT', 'CHA', 'STR', 'INT', 'CHA',\n        'DEX', 'CHA', 'DEX', 'DEX', 'CHA', 'WIS', 'CHA', 'INT', 'INT',\n        'WIS', 'CHA', 'WIS', 'DEX', 'WIS', 'DEX', 'INT', 'DEX', 'WIS',\n        'STR', 'CHA', ''];\n    const SKILL_NAMES = ['Acrobatics', 'Appraise', 'Bluff', 'Climb',\n        'Craft', 'Diplomacy', 'Disable Device', 'Disguise',\n        'Escape Artist', 'Fly', 'Handle Animal', 'Heal', 'Intimidate',\n        'Kn', 'Linguistics', 'Perception', 'Perf', 'Prof', 'Ride',\n        'Sense Motive', 'Sleight of Hand', 'Spellcraft', 'Stealth',\n        'Survival', 'Swim', 'Use Magic Device' ];\n    const SKILLS_UNTRAINED_USE = [\n        'Skill' ,'Acrobatics' ,'Appraise' ,'Bluff' ,'Climb' ,'Craft'\n        ,'Diplomacy' ,'Disguise' ,'Escape Artist' ,'Fly' ,'Heal'\n        ,'Intimidate' ,'Perception' ,'Perf' ,'Ride' ,'Sense Motive'\n        ,'Stealth' ,'Survival' ,'Swim' ];\n    const CATEGORY_SKILLS = ['Craft','Kn','Perf','Prof'];\n    const skillRows = SKILL_NAMES.reduce( (rows, name, i) => {\n        const hasCategory = CATEGORY_SKILLS.indexOf(name) > -1;\n        const isUntrainedUse = SKILLS_UNTRAINED_USE.indexOf(name) > -1;\n        if (!hasCategory) {\n            rows=rows.concat(<SkillRow key={name} {...props} name={name}\n            propKey={['skill',name.toLowerCase()]}\n            isUntrainedUse={isUntrainedUse}\n            ability={SKILL_ABILITIES[i]} hasCategory={hasCategory}/>);\n            return rows;\n        }\n        for( let categoryIndex = 0; categoryIndex < 10; categoryIndex++ ) {\n            const propKey = ['skill',name.toLowerCase()+categoryIndex];\n            const prevKey = ['skill',name.toLowerCase()+(categoryIndex-1)];\n            if( categoryIndex>0\n                && isEmpty(props.getState(prevKey,{}))\n                && isEmpty(props.getState(propKey,{})) ) {\n                continue;\n            }\n            rows=rows.concat(<SkillRow key={name+'i'+categoryIndex} {...props}\n                name={name} propKey={propKey} isUntrainedUse={isUntrainedUse}\n                ability={SKILL_ABILITIES[i]} hasCategory={hasCategory}/>);\n        }\n        return rows;\n    }, []);\n    let customSkillRows = [];\n    for( let categoryIndex = 0; categoryIndex < 10; categoryIndex++ ) {\n        const propKey = ['skill','custom'+categoryIndex];\n        const prevKey = ['skill','custom'+(categoryIndex-1)];\n        if( categoryIndex>0\n            && isEmpty(props.getState([...prevKey,'categ'],{}))\n            && isEmpty(props.getState(propKey,{})) ) {\n            continue;\n        }\n        customSkillRows=customSkillRows.concat(\n            <CustomSkillRow key={propKey} {...props} propKey={propKey} />);\n    }\n    const totalSkillRanks = props.getClassTypeTotal('skill');\n    const assignedSkillRanks = props.skill &&\n        Object.keys(props.skill).reduce( (sum, skill) =>\n            ( sum+props.getState(['skill',skill,'ranks'],0)), 0);\n    const unassignedSkillRanks = totalSkillRanks - assignedSkillRanks;\n    const unassignedLabel = \" (unused ranks \"+unassignedSkillRanks+\")\";\n    return (\n        <Table striped condensed className=\"skill-table\">\n            <thead>\n                <tr>\n                    <th className=\"skill-name\" colSpan={2}>\n                        <small>Skill{unassignedLabel}</small>\n                    </th>\n                    <th><small>Total</small></th>\n                    <th><small>Ranks</small></th>\n                    <th><small>Abil</small></th>\n                    <th><small>Trn.</small></th>\n                    <th><small>Misc</small></th>\n                    <th><small>Temp</small></th>\n                </tr>\n            </thead>\n            <tbody>\n                {skillRows}\n                {customSkillRows}\n            </tbody>\n            <tfoot className=\"small\">\n                <tr>\n                    <td colSpan={8}>\n                        *: denotes that current skill check penalty is applied:\n                        { props.getCurrentSkillCheckPenalty() }<br/>\n                        (using a move action to drop your equipment would change it to:\n                        { props.getArmedSkillCheckPenalty() })\n                    </td>\n                </tr>\n            </tfoot>\n        </Table>\n    );\n}\n\nfunction getRageState(props) {\n    const rageLevel = props.getState(['rage','level'])\n    return rageLevel>19 ? {header:'Mighty Rage', STR: 8, CON: 8, will: 4, ac: -2} :\n        rageLevel>10 ? {header:'Greater Rage', STR: 6, CON: 6, will: 3, ac: -2} :\n        {header:'Rage', STR: 4, CON: 4, will: 2, ac: -2};\n}\n\nfunction EquipmentTable(props) {\n    let equipmentRows = [];\n    for( let i = 0; i < 50; i++ ) {\n        const propKey = ['eq',''+i];\n        const prevKey = ['eq',''+(i-1)];\n        if( i>0 && isEmpty(props.getState(prevKey,{}))\n            && isEmpty(props.getState(propKey,{})) ) {\n            continue;\n        }\n        equipmentRows=equipmentRows.concat(\n            <EquipmentRow key={i} {...props} propKey={propKey} />);\n    }\n    return (\n        <Table condensed className=\"equipment-table\">\n            <thead>\n                <tr>\n                    <th className=\"equipment-name\"><small>Equipment name & description</small></th>\n                    <th><small>Value</small></th>\n                    <th><small>Weight</small></th>\n                </tr>\n            </thead>\n            <tbody>\n                {equipmentRows}\n            </tbody>\n        </Table>\n    );\n}\n\nfunction EquipmentRow(props) {\n    const {propKey} = props;\n    return (<tr>\n        <td><small><NoteArea {...props} placeholder=\"name note\" propKey={[...propKey,'name']} onerow/></small></td>\n        <td><TextField {...props} propKey={[...propKey,'value']}/></td>\n        <td><TextField {...props} propKey={[...propKey,'weight']}/></td>\n    </tr>);\n}\n\nconst RagePanel = compose(\n    onlyUpdateForKeys(['rage', 'stat', 'note']),\n    pure)(RagePanelImpl);\nfunction RagePanelImpl(props) {\n    if( !props.getState(['rage']) ) {\n        return <span />;\n    }\n    const rageLevel = props.getState(['rage','level'])\n    const rageRounds = 2 + 2 * rageLevel\n        + props.getAbilityMod('CON',true)\n        + props.getState(['rage','rounds','misc'],0)\n        - props.getState(['rage','rounds','used'],0)\n    const rageState = getRageState(props);\n    const headerCheckbox =\n    <CheckboxField {...props} inline propKey={['rage','enable']}>\n        {rageState.header}\n    </CheckboxField>;\n    const validationRageEnabled = props.getState(['rage','enable'],false) ? \"success\" : \"\";\n    // console.debug( 'validationRageEnabled', validationRageEnabled, props.getState(['rage','enable'],false) );\n    return (\n        <Panel header={headerCheckbox}>\n            <Row>\n                <Col sm={8}>\n                    <Row>\n                        <ColTextField {...props} label=\"Class levels\" propKey={['rage','level']} xs={3} />\n                        <ColTextField {...props} label=\"Misc rounds\" propKey={['rage','rounds','misc']} xs={3} />\n                        <ColTextField {...props} label=\"Used rounds\" validationState=\"warning\" propKey={['rage','rounds','used']} xs={3} />\n                        <ColText label=\"Rounds of rage left\" validationState=\"success\" xs={3} >{rageRounds}</ColText>\n                    </Row>\n                    <Row>\n                        <ColText label=\"STR bonus\" validationState={validationRageEnabled} xs={3} >{rageState.STR}</ColText>\n                        <ColText label=\"CON bonus\" validationState={validationRageEnabled} xs={3} >{rageState.CON}</ColText>\n                        <ColText label=\"Will bonus\" validationState={validationRageEnabled} xs={3} >{rageState.will}</ColText>\n                        <ColText label=\"AC penalty\" validationState={validationRageEnabled} xs={3} >{rageState.ac}</ColText>\n                    </Row>\n                </Col>\n                <Col sm={4}>\n                    <NoteArea {...props} noteKey=\"rage\" val={props.note.rage} />\n                </Col>\n            </Row>\n        </Panel>\n    );\n}\n\nfunction SpellcasterPanels(props) {\n    const panels = SPELLCASTERS.map( function(k) {\n        return <SpellTablePanel key={k} {...props} propKey={[k]}/>\n        });\n    return <div>{panels}</div>;\n}\n\nfunction SpellTablePanelHeader(props) {\n    const {propKey} = props;\n    return (\n        <Table condensed className=\"spells-header-table\">\n            <thead>\n                <tr className=\"middle\">\n                    <td>Spellcaster class:</td>\n                    <td><TextField {...props} bsSize=\"sm\" propKey={[...propKey,'className']}/></td>\n                    <td>Level:</td>\n                    <td><TextField {...props} bsSize=\"sm\" propKey={[...propKey,'level']}/></td>\n                    <td>Ability:</td>\n                    <td><SelectField {...props} propKey={[...propKey,'ability']} options={STATS} /></td>\n                </tr>\n            </thead>\n        </Table>\n    );\n}\n\nconst RANGES = [ 'personal', 'touch', 'close', 'medium', 'long' ];\nfunction SpellTablePanelRow(props) {\n    const {propKey,level,dcPlaceholder} = props;\n    const name = props.getState([...propKey, 'name']);\n    if (name === undefined) return (\n        <tr>\n            <th className=\"active\">{level}</th>\n            <th></th>\n            <th></th>\n            <th></th>\n            <th></th>\n            <th></th>\n            <td><NoteArea {...props} propKey={[...propKey,'name']}\n                placeholder=\"spell name & description\" onerow/></td>\n        </tr>)\n    const prep = props.getState([...propKey, 'prep']);\n    const used = props.getState([...propKey, 'used'], 0);\n    const propsDC = { ...props, placeholder: dcPlaceholder };\n    const prepCell = { className: prep>0?\"success\":\"\" };\n    const usedCell = { className: prep<used?\"danger\":\"warning\" };\n        return (\n            <tr>\n                <th className=\"active\">{level}</th>\n                <td><CheckboxField {...props} propKey={[...propKey,'SR']}/></td>\n                <td><TextField {...propsDC} propKey={[...propKey,'dc']}/></td>\n                <td><TextField {...props} propKey={[...propKey,'save']}/></td>\n                <td {...prepCell}><TextField {...props} propKey={[...propKey,'prep']}/></td>\n                <td {...usedCell}><TextField {...props} propKey={[...propKey,'used']}/></td>\n                <td><NoteArea {...props} propKey={[...propKey,'name']}\n                    placeholder=\"spell name & description\" onerow/></td>\n            <td><TextField {...props} propKey={[...propKey,'school']}/></td>\n            <td><TextField {...props} propKey={[...propKey,'duration']}/></td>\n            <td className=\"spell-range\">\n                <SelectField {...props} propKey={[...propKey,'range']} options={RANGES}\n                    className=\"appearance-none\"/>\n            </td>\n        </tr>\n    );\n}\n\nfunction SpellTablePanel(props) {\n    const {propKey} = props;\n    if( !props.getState(propKey) ) {\n        return null;\n    }\n    let spellTableRows = [];\n    const abilityMod = props.getAbilityMod( props.getState([...propKey,'ability']), true );\n    const rows = [0,1,2,3,4,5,6,7,8,9].map( function(lev) {\n        if( lev>0 && props.getState([...propKey,'l'+(lev-1),'class']) === undefined ) return '';\n        const levelKey = [...propKey,'l'+lev];\n        const hideLast = props.getState([...levelKey,'class']) === undefined?'hidden':'';\n        const abilityBonus = lev===0 ? 0 : abilityMod;\n        for( let i = 0; i<props.getState([...levelKey,'known'],0); i++ ) {\n            if( i>0 && props.getState([...levelKey,String(i-1)]) === undefined\n                && props.getState([...levelKey,String(i)]) === undefined\n            ) continue;\n            const rowPropKey=[...levelKey, String(i)];\n            spellTableRows = [...spellTableRows, <SpellTablePanelRow {...props}\n                dcPlaceholder={props.getState([...levelKey,'dc'],10+lev+abilityMod)}\n                propKey={rowPropKey} level={lev} key={rowPropKey.join('.')} /> ]\n        }\n        const remainingSpells = props.getState([...levelKey,'class'])===undefined?\"\":\n            abilityBonus - props.getState([...levelKey,'used'],0)\n            + ['class','misc'].reduce( function(sum, key) {\n                return sum + props.getState([...levelKey,key],0);\n            }, 0);\n        const remainingProps = { className: remainingSpells>0 ? \"success\" : \"text-center\" };\n        const usedProps = { className:\n            props.getState([...levelKey,'class'])===undefined ? \"\" :\n            remainingSpells<0 ? \"danger\" : \"warning\" };\n        return <tr key={lev}>\n            <th className=\"active\">{lev}</th>\n                <td><TextField {...props} className={hideLast}\n                    propKey={[...levelKey,'known']}/></td>\n                <td><TextField {...props} className={hideLast} propKey={[...levelKey,'dc']}\n                    placeholder={10+lev+abilityMod} /></td>\n            <th {...remainingProps}>{remainingSpells}</th>\n                <td><TextField {...props} propKey={[...levelKey,'class']}/></td>\n                <td>{hideLast?'':abilityBonus||''}</td>\n                <td><TextField {...props} className={hideLast}\n                    propKey={[...levelKey,'misc']}/></td>\n                <td {...usedProps}><TextField {...props} className={hideLast}\n                    propKey={[...levelKey,'used']}/></td>\n            </tr>\n    });\n    return (\n        <Panel header={SpellTablePanelHeader({...props, propKey:propKey})}>\n            <Row>\n                <Col sm={6}>\n                    <Table condensed className=\"spells-table\">\n                        <thead>\n                            <tr>\n                                <th><small>Spell Level</small></th>\n                                <th><small>#Spells known</small></th>\n                                <th><small>Save DC</small></th>\n                                <th><small>Spells remaining</small></th>\n                                <th><small>Class daily #</small></th>\n                                <th><small>Ability bonus</small></th>\n                                <th><small>Misc bonus</small></th>\n                                <th><small>Used</small></th>\n                            </tr>\n                        </thead>\n                        <tbody>\n                            {rows}\n                        </tbody>\n                    </Table>\n                </Col>\n                <Col sm={6}>\n                    <Table condensed className=\"spellRange-table\">\n                        <thead>\n                            <tr>\n                                <td></td>\n                                <td>Close</td>\n                                <td>Medium</td>\n                                <td>Long</td>\n                            </tr>\n                        </thead>\n                        <tbody>\n                            <tr>\n                                <td className=\"active\">Range (ft)</td>\n                                <th className=\"success\">\n                                    {25+5*Math.floor(props.getState([...propKey,'level'])/2)}</th>\n                                <th className=\"success\">\n                                    {100+10*props.getState([...propKey,'level'])}</th>\n                                <th className=\"success\">\n                                    {400+40*props.getState([...propKey,'level'])}</th>\n                            </tr>\n                        </tbody>\n                    </Table>\n                    <NoteArea {...props} placeholder=\"Specialty, domain, familiar, etc. notes\"\n        propKey={[...propKey,'note']} val={props.getState([...propKey,'note'])} />\n</Col>\n            </Row>\n            <Row>\n                <Col xs={12}>\n                    <Table condensed className=\"spell-list-table small\">\n                        <thead>\n                            <tr>\n                                <th><small>Lvl</small></th>\n                                <th><small>SR</small></th>\n                                <th><small>DC</small></th>\n                                <th><small>Save type</small></th>\n                                <th><small>Prep</small></th>\n                                <th><small>Used</small></th>\n                                <th className=\"spell-name\">\n                                    <small>Spell name & description & ref</small></th>\n                                <th><small>School</small></th>\n                                <th><small>Duration</small></th>\n                                <th><small>Range</small></th>\n                            </tr>\n                        </thead>\n                        <tbody>\n                            {spellTableRows}\n                        </tbody>\n                    </Table>\n                </Col>\n            </Row>\n        </Panel>\n    );\n}\n\nconst AddfieldsNavbar = compose(\n    onlyUpdateForKeys(['meta','debug', 'react_perf']),\n    pure)(AddfieldsNavbarImpl);\nfunction AddfieldsNavbarImpl(props) {\n    function clearTemp(e) {\n        console.log( 'clearTemp' );\n    }\n    function clearTempSubdual(e) {\n        clearTemp(e);\n        console.log( 'clearSubdual' );\n    }\n    function clearUses(e) {\n        console.log( 'clearUses' );\n    }\n    function clearUsesDamage(e) {\n        clearUses(e);\n        console.log( 'clearDamage' );\n    }\n    return (\n        <Navbar fluid>\n            <Navbar.Header>\n                <Navbar.Brand>\n                    { \"Version: \" + props.getState(['meta','rev'],0) }\n                </Navbar.Brand>\n                <Navbar.Toggle />\n            </Navbar.Header>\n            <Navbar.Collapse>\n                <Navbar.Text>\n                    { \"last change at: \" + props.getState(['meta','prevChangeTime'],'N/A') }\n                </Navbar.Text>\n                <Nav>\n                    <NavDropdown id=\"nav-clear\" title=\"TODO: Clear...\" className=\"hidden\">\n                        <MenuItem onSelect={clearTemp}>Temporary bonuses</MenuItem>\n                        <MenuItem onSelect={clearTempSubdual}>Temporary bonuses and subdual damage</MenuItem>\n                        <MenuItem onSelect={clearUses}>Uses per day</MenuItem>\n                        <MenuItem onSelect={clearUsesDamage}>Uses per day and all damage</MenuItem>\n                    </NavDropdown>\n                </Nav>\n                <Nav>\n                    <NavDropdown id=\"nav-add\" title=\"Add fields for...\">\n                        <MenuItem onSelect={props.handleChange(['rage'],Object)}>Rage</MenuItem>\n                        <MenuItem onSelect={props.handleChange([SPELLCASTERS.find(\n                            x=>!props[x] )],Object)}>Spellcaster class and spell list</MenuItem>\n                        <MenuItem className=\"hidden\">TODO:Spell like ability list</MenuItem>\n                    </NavDropdown>\n                </Nav>\n                <Nav pullRight>\n                    <NavDropdown id=\"nav-debug\" pullRight title={<small>Debug</small>}>\n                        <MenuItem onSelect={props.handleChange(['debug'],invert)}>\n                            <Checkbox checked={props.getState(['debug'],false)}>\n                                console debug\n                            </Checkbox>\n                        </MenuItem>\n                        <MenuItem onSelect={props.handleChange(['react_perf'],invert)}>\n                            <Checkbox checked={props.getState(['react_perf'],false)}>\n                                react_perf\n                            </Checkbox>\n                        </MenuItem>\n                    </NavDropdown>\n                </Nav>\n            </Navbar.Collapse>\n        </Navbar>\n    );\n}\n\nfunction LoadTable(props) {\n    const loadLevels = props.getLoadLevels();\n    const currentLoad = props.getCurrentLoad();\n    function fullLoadClass(loadLevel) {\n        const levels = [-1].concat(loadLevels);\n        if( currentLoad > levels[3] && loadLevel < 3 ) return \"danger\"\n        return levels[loadLevel] < currentLoad &&\n            currentLoad <= levels[loadLevel+1] ? \"info\" : \"\";\n    }\n    const armedLoadName = props.getArmedLoadName();\n    function loadClass(loadName) {\n        return armedLoadName === loadName ? \"success\" : \"\";\n    }\n    function armorClass(armorLevel) {\n        return ARMOR_TYPES[armorLevel] === props.getState('armor.type') ?\n            \"success\" : \"\";\n    }\n    return (\n        <Table condensed className=\"load-table small\">\n            <thead>\n                <tr>\n                    <th>Encumberance</th>\n                    <td>Light</td>\n                    <td>Medium</td>\n                    <td>Heavy</td>\n                    <td>Lift</td>\n                    <td>Drag</td>\n                </tr>\n            </thead>\n            <tbody>\n                <tr>\n                    <th className=\"active\">Current load: <strong>{currentLoad}</strong></th>\n                    <td className={fullLoadClass(0)}>{loadLevels[0]}</td>\n                    <td className={fullLoadClass(1)}>{loadLevels[1]}</td>\n                    <td className={fullLoadClass(2)}>{loadLevels[2]}</td>\n                    <td className={fullLoadClass(3)}>{loadLevels[2]*2}</td>\n                    <td className={fullLoadClass(4)}>{loadLevels[2]*5}</td>\n                </tr>\n                <tr>\n                    <th className=\"active\">Combat load: <strong>{props.getArmedLoad()}</strong></th>\n                    <td className={loadClass('light')}>{loadLevels[0]}</td>\n                    <td className={loadClass('medium')}>{loadLevels[1]}</td>\n                    <td className={loadClass('heavy')}>{loadLevels[2]}</td>\n                    <td className={loadClass('lift')}>{loadLevels[2]*2}</td>\n                    <td className={loadClass('drag')}>{loadLevels[2]*5}</td>\n                </tr>\n                <tr>\n                    <th className=\"active\">Max DEX to AC</th>\n                    <td className={loadClass('light')}>-</td>\n                    <td className={loadClass('medium')}>\n                        <TextField {...props} propKey={['load','medium','max-dex']}\n                            placeholder=\"3\" className=\"width-2-digit\" /></td>\n                    <td className={loadClass('heavy')}>\n                        <TextField {...props} propKey={['load','heavy','max-dex']}\n                            placeholder=\"1\" className=\"width-2-digit\" /></td>\n                    <td>\n                        <TextField {...props} propKey={['load','stagger','max-dex']}\n                            placeholder=\"0\" className=\"width-2-digit\" /></td>\n                </tr>\n                <tr>\n                    <th className=\"active\">Skill check penalty</th>\n                    <td className={loadClass('light')}>0</td>\n                    <td className={loadClass('medium')}>\n                        <TextField {...props} propKey={['load','medium','skill-penalty']}\n                            placeholder=\"3\" className=\"width-2-digit\" /></td>\n                    <td className={loadClass('heavy')}>\n                        <TextField {...props} propKey={['load','heavy','skill-penalty']}\n                            placeholder=\"6\" className=\"width-2-digit\" /></td>\n                    <td></td>\n                </tr>\n                <tr>\n                    <th className=\"active\">Base speed (run)</th>\n                    <td className={loadClass('light')}>\n                        <TextField {...props} propKey={['load','light','base-speed']}\n                            className=\"width-5em\" /></td>\n                    <td className={loadClass('medium')}>\n                        <TextField {...props} propKey={['load','medium','base-speed']}\n                            className=\"width-5em\" /></td>\n                    <td className={loadClass('heavy')}>\n                        <TextField {...props} propKey={['load','heavy','base-speed']}\n                            className=\"width-5em\" /></td>\n                    <td className={loadClass('lift')}>\n                        {props.getValue(['load','lift','base-speed'])}</td>\n                </tr>\n                <tr>\n                    <th className=\"active\">Speed with armor (run)</th>\n                    <td className={armorClass(0)}>{props.getValue('load.light.base-speed')}</td>\n                    <td className={armorClass(1)}>\n                        <TextField {...props} propKey={['armor','medium','base-speed']}\n                            className=\"width-5em\" /></td>\n                    <td className={armorClass(2)}>\n                        <TextField {...props} propKey={['armor','heavy','base-speed']}\n                            className=\"width-5em\" /></td>\n                </tr>\n            </tbody>\n        </Table>\n    );\n}\n\nfunction invert(v) {\n    return (!!v) ? undefined : true;\n}\nfunction isEmpty(object) {\n    return (object === null || typeof(object) === 'object') && Object.keys(object).length === 0;\n}\nvar autoresizeFields = [];\nfunction addAutoresize(inputRef) {\n    if( !inputRef ) return;\n    autoresizeFields.push( inputRef );\n    inputRef.addEventListener('input', function(e) { autoresize_update(e.target) }, false);\n    autoresize_update( inputRef );\n}\nfunction autoresizeAll() {\n    console.debug( 'autoresizeAll' );\n    autoresizeFields.forEach( autoresize_update );\n}\nfunction autoresize_update( inputRef ) {\n    // console.log('autoresize_update',inputRef, inputRef.scrollHeight);\n    inputRef.style.height = '';\n    inputRef.style.height = inputRef.scrollHeight+'px';\n    //inputRef.scrollTop = inputRef.scrollHeight;\n    //window.scrollTo(window.scrollLeft,(inputRef.scrollTop+inputRef.scrollHeight));\n}\n// Polyfill\nif (!Array.isArray) {\n    Array.isArray = function(arg) {\n        return Object.prototype.toString.call(arg) === '[object Array]';\n    };\n}\n\nReactDOM.render( <App />, document.getElementById('root'));\n\n"],"sourceRoot":""}